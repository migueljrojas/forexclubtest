{"version":3,"sources":["src/_scripts/node_modules/browser-pack/_prelude.js","src/_scripts/src/_scripts/form-validation.js","src/_scripts/src/_scripts/main.js","src/_scripts/src/_scripts/table-generator.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\r\n\r\nvar FormValidation = function() {\r\n    var formSubmitButton = document.querySelector('button[type=submit]');\r\n    var form = document.querySelector('.libertex-form');\r\n    var formInputs = document.querySelectorAll('.libertex-form__input');\r\n    var nameInput = document.getElementById('name');\r\n    var surnameInput = document.getElementById('surname');\r\n    var phoneInput = document.getElementById('phone');\r\n    var emailInput = document.getElementById('email');\r\n\r\n    form.addEventListener('blur', validateFormSubmission, true);\r\n\r\n    function validateFormSubmission() {\r\n        if ( !isRequiredInputEmpty() ) {\r\n            enableFormSubmitButton();\r\n        } else {\r\n            disableFormSubmitButton();\r\n        }\r\n    }\r\n\r\n    function isRequiredInputEmpty() {\r\n        var requiredInputs = document.querySelectorAll('input[required]');\r\n        var requiredInputsArray = [].slice.call(requiredInputs);\r\n        var filledInputs = 0;\r\n\r\n        requiredInputsArray.forEach(function(input) {\r\n            var inputValue = input.value;\r\n\r\n            if (inputValue !== '') {\r\n                filledInputs++;\r\n            }\r\n        });\r\n\r\n        return requiredInputsArray.length === filledInputs ? false : true;\r\n    }\r\n\r\n    function enableFormSubmitButton() {\r\n        formSubmitButton.disabled = false;\r\n    }\r\n\r\n    function disableFormSubmitButton() {\r\n        formSubmitButton.disabled = true;\r\n    }\r\n\r\n    formSubmitButton.addEventListener('click', submitForm, true);\r\n\r\n    function submitForm(event) {\r\n        event.preventDefault();\r\n        disableFormSubmitButton();\r\n\r\n        var inputValuesAreValid = validateInputValues();\r\n\r\n        if (inputValuesAreValid) {\r\n            displaySuccessfulMessage();\r\n            disableFormSubmitButton();\r\n        } else {\r\n            catchFormValidationError();\r\n            enableFormSubmitButton();\r\n        }\r\n    }\r\n\r\n    function validateInputValues() {\r\n        var isInputValuesValid = false;\r\n\r\n        if (\r\n            valueDontContainNumbers(nameInput.value) &&\r\n            valueDontContainNumbers(surnameInput.value) &&\r\n            valueIsValidPhone(phoneInput.value) &&\r\n            valueIsValidEmail(emailInput.value)\r\n        ) {\r\n            isInputValuesValid = true;\r\n        }\r\n\r\n        return isInputValuesValid;\r\n    }\r\n\r\n    function valueDontContainNumbers(value) {\r\n        var regexCondition = /^[a-z]+$/i;\r\n        return regexCondition.test(value);\r\n    }\r\n\r\n    function valueIsValidPhone(value) {\r\n        var regexCondition = /^[+]*[(]{0,1}[0-9 ]{1,4}[)]{0,1}[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s\\.0-9]*$/g;\r\n        return regexCondition.test(value);\r\n    }\r\n\r\n    function valueIsValidEmail(value) {\r\n        var regexCondition = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{1,}))$/g;\r\n\r\n        if (value !== '') {\r\n            return regexCondition.test(value);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function displaySuccessfulMessage() {\r\n        setTimeout(function() {\r\n            form.classList.add('libertex-form--success');\r\n            resetForm();\r\n\r\n            setTimeout(function() {\r\n                form.classList.remove('libertex-form--success');\r\n            }, 4000);\r\n        }, 2000);\r\n    }\r\n\r\n    function catchFormValidationError() {\r\n\r\n        switch (false) {\r\n            case valueDontContainNumbers(nameInput.value):\r\n                displayErrorMessage(nameInput, 'This field should be only letters');\r\n                break;\r\n            case valueDontContainNumbers(surnameInput.value):\r\n                displayErrorMessage(surnameInput, 'This field should be only letters');\r\n                break;\r\n            case valueIsValidPhone(phoneInput.value):\r\n                displayErrorMessage(phoneInput, 'Please enter a valid phone number');\r\n                break;\r\n            case valueIsValidEmail(emailInput.value):\r\n                displayErrorMessage(emailInput, 'Please enter a valid email address');\r\n                break;\r\n        }\r\n    }\r\n\r\n    function displayErrorMessage(input, message) {\r\n        input.classList.add('libertex-form__input--error');\r\n        var errorMessageContainer = input.nextSibling;\r\n\r\n        errorMessageContainer.innerHTML = message;\r\n    }\r\n\r\n    form.addEventListener('focus', hideErrorMessages, true);\r\n\r\n    function hideErrorMessages() {\r\n        var errorMessage = document.querySelector('.libertex-form__input--error');\r\n\r\n        if (errorMessage) {\r\n            errorMessage.classList.remove('libertex-form__input--error');\r\n        }\r\n    }\r\n\r\n    function resetForm() {\r\n        var formInputsArray = [].slice.call(formInputs);\r\n\r\n        formInputsArray.forEach(function(input) {\r\n            input.value = '';\r\n        });\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FormValidation;\r\n","'use strict';\r\n\r\nvar FormValidation = require('./form-validation');\r\nvar TableGenerator = require('./table-generator');\r\n\r\n(function() {\r\n    new FormValidation();\r\n    new TableGenerator();\r\n})();\r\n","'use strict';\r\n\r\nvar TableGenerator = function() {\r\n    var tableData = [\r\n        {\r\n            money: 5321,\r\n            account: \"123 456 000\",\r\n            country: \"rusia\"\r\n        },\r\n        {\r\n            money: 3000,\r\n            account: \"425 238 238\",\r\n            country: \"spain\"\r\n        },\r\n        {\r\n            money: 890,\r\n            account: \"123 543 548\",\r\n            country: \"china\"\r\n        },\r\n        {\r\n            money: 777,\r\n            account: \"090 235 453\",\r\n            country: \"rusia\"\r\n        },\r\n        {\r\n            money: 666,\r\n            account: \"009 281 443\",\r\n            country: \"spain\"\r\n        },\r\n        {\r\n            money: 555,\r\n            account: \"515 654 522\",\r\n            country: \"china\"\r\n        },\r\n        {\r\n            money: 444,\r\n            account: \"765 452 241\",\r\n            country: \"rusia\"\r\n        },\r\n        {\r\n            money: 333,\r\n            account: \"562 183 816\",\r\n            country: \"spain\"\r\n        },\r\n        {\r\n            money: 222,\r\n            account: \"642 452 555\",\r\n            country: \"china\"\r\n        },\r\n        {\r\n            money: 111,\r\n            account: \"212 552 112\",\r\n            country: \"rusia\"\r\n        }\r\n    ];\r\n    var table = document.querySelector('.libertex-ranking__table');\r\n    var tableBody = document.querySelector('.libertex-ranking__table-body');\r\n    var tableRows = tableBody.querySelectorAll('.libertex-ranking__table-row');\r\n\r\n    populateTableWithData();\r\n\r\n    function populateTableWithData() {\r\n        var tableSortCriteriaInLocalStorage = isTableSorCriteriaInLocalStorage();\r\n\r\n        if (tableSortCriteriaInLocalStorage) {\r\n            var orderedTableData =\r\n                tableData.concat().sort(compareValues(tableSortCriteriaInLocalStorage));\r\n            getCellsData(orderedTableData);\r\n        } else {\r\n            getCellsData(tableData);\r\n        }\r\n\r\n        setActiveSort(tableSortCriteriaInLocalStorage);\r\n    }\r\n\r\n    function isTableSorCriteriaInLocalStorage() {\r\n        return JSON.parse(localStorage.getItem('libertex-table-sort-criteria'));\r\n    }\r\n\r\n    function getCellsData(data) {\r\n\r\n        data.forEach(function(row, index) {\r\n            var rowCells = tableRows[index].querySelectorAll('.libertex-ranking__table-cell');\r\n\r\n            rowCells[0].innerHTML = '<span>' + row.money + '</span>';\r\n            rowCells[1].innerHTML = '<span>' + row.account + '</span>';\r\n            rowCells[2].innerHTML = '<img src=\"images/' + row.country + '.png\" alt=\"'+ row.country +'\" />';\r\n        });\r\n    }\r\n\r\n    table.addEventListener('click', sortTableData, false);\r\n\r\n    function sortTableData(event) {\r\n\r\n        var targetParent = event.target.parentNode;\r\n\r\n        if (targetParent.hasAttribute('data-sort')) {\r\n            var sortCriteria = targetParent.getAttribute('data-sort');\r\n            var orderedTableData =\r\n                tableData.concat().sort(compareValues(sortCriteria));\r\n\r\n            getCellsData(orderedTableData);\r\n            setActiveSort(sortCriteria);\r\n            saveTableSortCriteria(sortCriteria);\r\n        }\r\n    }\r\n\r\n    function setActiveSort(sortCriteria) {\r\n        var tableRows = tableBody.querySelectorAll('.libertex-ranking__table-row');\r\n        var sortedCells = document.querySelectorAll('.libertex-ranking__table-cell--sorted');\r\n        var sortedCellsArray = [].slice.call(sortedCells);\r\n        var tableHeader = document.querySelector('.libertex-ranking__table-header');\r\n        var tableHeaderCells = tableHeader.querySelectorAll('.libertex-ranking__table-cell--header');\r\n        var cellIndex = 0;\r\n\r\n\r\n        if (sortCriteria === 'account') {\r\n            cellIndex = 1;\r\n        }\r\n\r\n        if (sortCriteria === 'country') {\r\n            cellIndex = 2;\r\n        }\r\n\r\n        sortedCellsArray.forEach(function(cell) {\r\n            cell.classList.remove('libertex-ranking__table-cell--sorted');\r\n        });\r\n\r\n        for (var rowIndex = 0; rowIndex <= 2; rowIndex++) {\r\n            var cells = tableRows[rowIndex].querySelectorAll('.libertex-ranking__table-cell');\r\n\r\n            cells[cellIndex].classList.add('libertex-ranking__table-cell--sorted');\r\n        }\r\n\r\n        tableHeaderCells[cellIndex].classList.add('libertex-ranking__table-cell--sorted');\r\n    }\r\n\r\n    function compareValues(key) {\r\n        return function(a, b) {\r\n\r\n            var comparison = 0;\r\n            if (a[key] > b[key]) {\r\n                comparison = 1;\r\n            } else if (a[key] < b[key]) {\r\n                comparison = -1;\r\n            }\r\n\r\n            return comparison * -1;\r\n        };\r\n    }\r\n\r\n    function saveTableSortCriteria(sortCriteria) {\r\n        localStorage.setItem('libertex-table-sort-criteria', JSON.stringify(sortCriteria));\r\n    }\r\n}\r\n\r\nmodule.exports = TableGenerator;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}